#!/usr/bin/env bash
TARFILE="/tmp/swiftrings.tar.gz"
BASE_URL="https://kubernetes.default.svc/api/v1/namespaces/${NAMESPACE}/configmaps"
URL="${BASE_URL}/${CM_NAME}"
DEVICESFILE="/var/lib/config-data/ring-devices/devices.txt"

# Credentials to be used by curl
export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

function get() {
    # Get the ConfigMap with the Swiftrings if it exists. If it exists, untar it
    # and update the rings. If it does not exist, create a new ConfigMap using a
    # POST request. If the response code is neither 200 or 404 fail early, b/c it
    # is unclear if there might be an existing set of rings that should not be
    # overwritten
    HTTP_CODE=$(/usr/bin/curl \
        -H "Authorization: Bearer $TOKEN" \
        -o "${CM_NAME}.json" \
        -w "%{http_code}" \
        --silent --show-error --fail \
        -X GET "${URL}")

    case $HTTP_CODE in
        "200")
            # Configmap was found
            # Get JSON keyvalue without jq
            grep -e '"swiftrings.tar.gz": ".*"' "${CM_NAME}.json"  | cut -f 4 -d '"' | base64 -d > $TARFILE
            [ -e $TARFILE ] && tar --totals -xzf $TARFILE
        ;;

        "404")
            rm "${CM_NAME}.json"
        ;;

        *)
            exit 1
        ;;
    esac
}


function init() {
    # Create new rings if not existing
    for f in account.builder container.builder object.builder; do
        [ ! -e $f ] && swift-ring-builder $f create ${SWIFT_PART_POWER} ${SWIFT_REPLICAS} ${SWIFT_MIN_PART_HOURS} || true
    done
}


function update() {
    # Iterate over all devices from the list created by the SwiftStorage CR.
    while read REGION ZONE HOST DEVICE_NAME WEIGHT; do
        # Check if host/disk exists and only add if not
        swift-ring-builder account.builder search --ip $HOST --device $DEVICE_NAME
        [ $? -eq 2 ] && swift-ring-builder account.builder add --region $REGION --zone $ZONE --ip $HOST --port 6202 --device $DEVICE_NAME --weight $WEIGHT

        # Check if host/disk exists and only add if not
        swift-ring-builder container.builder search --ip $HOST --device $DEVICE_NAME
        [ $? -eq 2 ] && swift-ring-builder container.builder add --region $REGION --zone $ZONE --ip $HOST --port 6201 --device $DEVICE_NAME --weight $WEIGHT

        # Check if host/disk exists and only add if not
        swift-ring-builder object.builder search --ip $HOST --device $DEVICE_NAME
        [ $? -eq 2 ] && swift-ring-builder object.builder add --region $REGION --zone $ZONE --ip $HOST --port 6200 --device $DEVICE_NAME --weight $WEIGHT
done < $DEVICESFILE
}


function rebalance() {
    for f in *.builder; do
        swift-ring-builder $f rebalance
    done
}


function forced_rebalance() {
    for f in *.builder; do
        swift-ring-builder $f pretend_min_part_hours_passed
        swift-ring-builder $f rebalance
    done
}


function drain() {
    for f in *.builder; do
        swift-ring-builder $f set_weight --ip $1 0 --yes
    done
}


function remove() {
    for f in *.builder; do
        swift-ring-builder $f remove $1
    done
}


function push() {
    # Tar up all the ring data and either create or update the SwiftRing ConfigMap
    BINARY_DATA=`tar --totals -cz *.builder *.ring.gz backups/*.builder | /usr/bin/base64 -w 0`

    if [ ! -e "${CM_NAME}.json" ]; then
        METHOD="POST"
        URL="${BASE_URL}"
        VERSION=""
    else
        METHOD="PUT"
        VERSION="$(grep -oP '"resourceVersion": ".*"' "${CM_NAME}.json"),"
    fi

    CONFIGMAP_JSON='{
        "apiVersion":"v1",
        "kind":"ConfigMap",
        "metadata":{
            '${VERSION}'
            "name":"'${CM_NAME}'",
            "namespace":"'${NAMESPACE}'",
            "finalizers": ["swift-ring/finalizer"],
            "ownerReferences": [
                {
                    "apiVersion": "'${OWNER_APIVERSION}'",
                    "kind": "'${OWNER_KIND}'",
                    "name": "'${OWNER_NAME}'",
                    "uid": "'${OWNER_UID}'"
                }
            ]
        },
        "binaryData":{
            "swiftrings.tar.gz": "'${BINARY_DATA}'",
        }
    }'

    # https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/#update-replace-the-specified-configmap
    /usr/bin/curl \
        -H "Authorization: Bearer $TOKEN" \
        --data-binary "${CONFIGMAP_JSON}" \
        -H 'Content-Type: application/json' \
        -o /dev/null --silent --show-error --fail \
        -X "${METHOD}" "${URL}"
}


function usage() {
    echo "Usage: $0 [get|init|update|rebalance|push|all]"
    echo
    echo "get        Fetch rings from ConfigMap ${CM_NAME}"
    echo "init       Create new .builder files if not existing"
    echo "update     Update rings using input from ${DEVICESFILE}"
    echo "drain      Set weight of all node devices to 0"
    echo "remove     Remove node from all rings"
    echo "rebalance  Rebalance rings"
    echo "push       Push rings to ConfigMap ${CM_NAME}"
    echo "all        All above operations in sequence"
    echo
}


case $1 in
    "all")
        get
        init
        update
        rebalance
        push
    ;;

    "get")
        get
    ;;

    "init")
        init
    ;;

    "update")
        update
    ;;

    "drain")
        drain $2
    ;;

    "remove")
        remove $2
    ;;

    "rebalance")
        rebalance
    ;;

    "forced_rebalance")
        forced_rebalance
    ;;

    "push")
        push
    ;;

    *)
        usage
        exit 1
    ;;
esac
